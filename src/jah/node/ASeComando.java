/* This file was generated by SableCC (http://www.sablecc.org/). */

package jah.node;

import java.util.*;
import jah.analysis.*;

@SuppressWarnings("nls")
public final class ASeComando extends PComando
{
    private PExpLogica _expLogica_;
    private final LinkedList<PComando> _obrigat_ = new LinkedList<PComando>();
    private final LinkedList<PComando> _opcional_ = new LinkedList<PComando>();

    public ASeComando()
    {
        // Constructor
    }

    public ASeComando(
        @SuppressWarnings("hiding") PExpLogica _expLogica_,
        @SuppressWarnings("hiding") List<?> _obrigat_,
        @SuppressWarnings("hiding") List<?> _opcional_)
    {
        // Constructor
        setExpLogica(_expLogica_);

        setObrigat(_obrigat_);

        setOpcional(_opcional_);

    }

    @Override
    public Object clone()
    {
        return new ASeComando(
            cloneNode(this._expLogica_),
            cloneList(this._obrigat_),
            cloneList(this._opcional_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASeComando(this);
    }

    public PExpLogica getExpLogica()
    {
        return this._expLogica_;
    }

    public void setExpLogica(PExpLogica node)
    {
        if(this._expLogica_ != null)
        {
            this._expLogica_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expLogica_ = node;
    }

    public LinkedList<PComando> getObrigat()
    {
        return this._obrigat_;
    }

    public void setObrigat(List<?> list)
    {
        for(PComando e : this._obrigat_)
        {
            e.parent(null);
        }
        this._obrigat_.clear();

        for(Object obj_e : list)
        {
            PComando e = (PComando) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._obrigat_.add(e);
        }
    }

    public LinkedList<PComando> getOpcional()
    {
        return this._opcional_;
    }

    public void setOpcional(List<?> list)
    {
        for(PComando e : this._opcional_)
        {
            e.parent(null);
        }
        this._opcional_.clear();

        for(Object obj_e : list)
        {
            PComando e = (PComando) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._opcional_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expLogica_)
            + toString(this._obrigat_)
            + toString(this._opcional_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expLogica_ == child)
        {
            this._expLogica_ = null;
            return;
        }

        if(this._obrigat_.remove(child))
        {
            return;
        }

        if(this._opcional_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expLogica_ == oldChild)
        {
            setExpLogica((PExpLogica) newChild);
            return;
        }

        for(ListIterator<PComando> i = this._obrigat_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PComando) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PComando> i = this._opcional_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PComando) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
