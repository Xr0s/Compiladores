Package simpleAdder ; 
     
Helpers 
    /* Our helpers */ 
    caracteres_permitidos = [[32..126]-39];
    all = [0 .. 0xffff];
    numero = ['0' .. '9'] ; 
   	tab = 9;
 	cr = 13; 
 	nl = 10;
 	eol = nl | cr | cr nl; 
    sp = 32; /*Espaço */
	letra = [ ['A' .. 'Z'] + ['a' .. 'z'] ] ;
    underscore = '_' ;
    verdadeiro = 'verdadeiro';
    falso = 'falso';
    
States
  normal,comment;

    
Tokens 
    {normal} branco = eol | tab | sp;
    {normal} tabulacao = tab;
    {normal} enter = eol;
    {normal} espaco = sp;
   
 /*	Palavras reservadas  */  //palavras reservadas devem vir primeiro que id para evitar conflito 
 	{normal} programa = 'programa';
 	{normal} se = 'se';
 	{normal} senao = 'senao';
 	{normal} inicio = 'inicio';
 	{normal} fim = 'fim.';
 	{normal} enquanto = 'enquanto';
 	{normal} para = 'para';
 	{normal} avalie = 'avalie';
 	{normal} caso = 'caso';
 	{normal} leia = 'leia';
 	{normal} escreva = 'escreva';
	{normal} entao = 'entao';
	{normal} faca = 'faca';
	{normal} repita = 'repita';
	{normal} ate = 'ate';
	{normal} xor = 'xor';
	{normal} de = 'de';
	{normal} passo = 'passo';
	{normal} fim_avalie = 'fim avalie';
	{normal} fim_se = 'fim se';
	{normal} fim_para = 'fim para';
	{normal} fim_enquanto = 'fim enquanto';
	{normal} const = 'const';
	
	//Reservadas com comandos
	
  	{normal} inteiro_reservada =  'inteiro';
 	{normal} real_reservada =  'real';
   	{normal} caractere_reservada = 'caractere';
   	{normal} booleano_reservada = 'booleano';
   	
  /* 	Tipos de Comentarios 		*/
  	{normal} fim_comentario = '*/';
	{normal} comentario_de_linha = '//'[[[0..9]+[11..12]]+[14..255]]*;  //tudo menos o nl
  	{normal->comment, comment}
     comment = '/*';
	{comment} comment_end = '*/';
	{comment} comment_body = [all -['*' + '/']]*;
	{comment} star = '*';
	{comment} slash = '/';    
  	
 /* Operadores aritmeticos*/ 
	{normal} mais = '+' ; 
    {normal} menos = '-' ;
    {normal} mult = '*';
    {normal} div = '/' ; 

/* 	Operadores relacionais */
	{normal} igual = '=';
	{normal} diferente = '<>';
	{normal} maiorig = '>=';
	{normal} menorig = '<=';
	{normal} maior = '>' ;
	{normal} menor = '<' ;
	
/* 	Simbolos			*/
	{normal} abre_colchete = '[' ;
	{normal} abre_parentese = '(' ;
	{normal} fecha_colchete = ']' ;
	{normal} fecha_parentese = ')' ;
	{normal} atribuicao = ':=' ;
    {normal} doispontos = ':' ;
	{normal} pontovirgula = ';' ;
    {normal} virgula = ',';
	
/* 	Operadores boleanos 		*/
	{normal} nao = 'nao';
	{normal} ou = 'ou' ;
	{normal} e = 'e' ;
 
/*	Tipos de variaveis*/
	{normal} inteiro =  numero+;
 	{normal} real =   numero+ ',' numero+;
   	{normal} caractere = '''caracteres_permitidos''';
   	{normal} booleano = verdadeiro | falso;
	
// simbolos especiais
	{normal} string = ''' caracteres_permitidos+ ''';
	
//	Identificadores
	{normal} id = (letra (letra | underscore | numero)* ) | (underscore (letra | underscore | numero)+) ;    

Ignored Tokens
	branco,comment, comentario_de_linha;

Productions 
	 program = programa  id  inicio declaracao* comando* fim;
	 
	 declaracao = {variavel} tipo doispontos decl_variavel
	 			| {constante} const id valor pontovirgula;
	 
	 decl_variavel = {varias} var virgula decl_variavel 
	 				| {unica} var pontovirgula;
	 
	 comando = var atribuicao exp pontovirgula
	 		 |{leia} leia abre_parentese decl_var_sempontov fecha_parentese pontovirgula
			 |{escreva} escreva abre_parentese decl_exp fecha_parentese pontovirgula
			 |{se} se abre_parentese exp_logica fecha_parentese entao comando+ decl_senao? fim_se pontovirgula
			 |{enquanto} enquanto abre_parentese exp_logica fecha_parentese faca comando+ fim_enquanto pontovirgula
			 |{repita} repita comando+ ate abre_parentese exp_logica fecha_parentese pontovirgula
			 |{para_sem_passo} para var de [esquerda]:inteiro ate [direita]:inteiro faca comando+ fim_para pontovirgula
			 |{para_com_passo} para var de [primeiro]:inteiro passo [segundo]:inteiro 
			   				   ate [terceiro]:inteiro faca comando+ fim_para pontovirgula
			 |{avalie} avalie abre_parentese exp fecha_parentese casos*  decl_senao_avalie pontovirgula;
			
	//Estrutura auxiliar para o se
	decl_senao = senao comando+;	
	
	//Estrutura auxiliar para o avalie
	casos = caso valor doispontos comando+;
	
	decl_senao_avalie = {com_opcional} senao doispontos comando+ fim_avalie 
	   			      | {sem_opcional} fim_avalie;
	
	//Estrutura auxiliar para o leia		
	decl_var_sempontov = {varias} var virgula decl_var_sempontov 
	 			       | {unica} var;
	
	//Estrutura auxiliar para o escreva 
	decl_exp = {varias_exp} exp virgula decl_exp 
	 		 | {unica_exp} exp;
	 
	//Estrutura do exp	
	exp = {expsoma} exp soma termo 
		| {termo} termo ;
	
	soma = {mais} mais 
		 | {menos} menos ;
	
	termo = {op} termo op fator 
		  | {fator} fator  ;
	
	op = {div} div
	   | {mult} mult;
	
	fator = {exp} abre_parentese exp fecha_parentese 
		   | {valor} valor
		   | {var} var
		   | {logica} exp_logica;
	
	exp_logica = booleano;
	    	
//	exp_logica = {nao} nao exp_logica
//			   | {logic} logica_pri;
			   
//	logica = {e} exp_logica e logica_pri
//			   | {termo} logica_pri;		   
	
//	logica_termo = {ou} logica_termo ou logica_fator
//				 | {fator} logica_fator;
	
//	logica_fator = {xor} logica_fator xor logica_pri
//				 | {prio} logica_pri;
	
//	logica_pri = //{exp_logica} abre_parentese exp_logica fecha_parentese
//			    {bool} exp;  
			   

//declaracao de variaveis, tipos e valor;

	var = {id_unica} id 
	    | {vetor} id abre_colchete inteiro fecha_colchete;	 	 
	 
	tipo = {real_palavra} real_reservada 
	     | {inteiro_palavra}inteiro_reservada 
	     | {caracter_palavra}caractere_reservada 
	     | {booleano_palavra}booleano_reservada;
	 
	valor = {char} caractere 
	 	  | {int} inteiro
	      | {float} real;

//Lembrar da exceção de comentario de bloco fim errado caso troque o nome de simpleAdder
