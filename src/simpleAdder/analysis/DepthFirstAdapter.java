/* This file was generated by SableCC (http://www.sablecc.org/). */

package simpleAdder.analysis;

import java.util.*;
import simpleAdder.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPExpLogica().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAOuExpLogica(AOuExpLogica node)
    {
        defaultIn(node);
    }

    public void outAOuExpLogica(AOuExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuExpLogica(AOuExpLogica node)
    {
        inAOuExpLogica(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outAOuExpLogica(node);
    }

    public void inAEExpLogica(AEExpLogica node)
    {
        defaultIn(node);
    }

    public void outAEExpLogica(AEExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEExpLogica(AEExpLogica node)
    {
        inAEExpLogica(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outAEExpLogica(node);
    }

    public void inAXorExpLogica(AXorExpLogica node)
    {
        defaultIn(node);
    }

    public void outAXorExpLogica(AXorExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorExpLogica(AXorExpLogica node)
    {
        inAXorExpLogica(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outAXorExpLogica(node);
    }

    public void inANegacaoExpLogica(ANegacaoExpLogica node)
    {
        defaultIn(node);
    }

    public void outANegacaoExpLogica(ANegacaoExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegacaoExpLogica(ANegacaoExpLogica node)
    {
        inANegacaoExpLogica(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outANegacaoExpLogica(node);
    }

    public void inAIgualdadeExpExpLogica(AIgualdadeExpExpLogica node)
    {
        defaultIn(node);
    }

    public void outAIgualdadeExpExpLogica(AIgualdadeExpExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualdadeExpExpLogica(AIgualdadeExpExpLogica node)
    {
        inAIgualdadeExpExpLogica(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outAIgualdadeExpExpLogica(node);
    }

    public void inADiferenteExpExpLogica(ADiferenteExpExpLogica node)
    {
        defaultIn(node);
    }

    public void outADiferenteExpExpLogica(ADiferenteExpExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiferenteExpExpLogica(ADiferenteExpExpLogica node)
    {
        inADiferenteExpExpLogica(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outADiferenteExpExpLogica(node);
    }

    public void inAIgualdadePExpLogica(AIgualdadePExpLogica node)
    {
        defaultIn(node);
    }

    public void outAIgualdadePExpLogica(AIgualdadePExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualdadePExpLogica(AIgualdadePExpLogica node)
    {
        inAIgualdadePExpLogica(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getLogicaIgualdadePart() != null)
        {
            node.getLogicaIgualdadePart().apply(this);
        }
        outAIgualdadePExpLogica(node);
    }

    public void inADiferentePExpLogica(ADiferentePExpLogica node)
    {
        defaultIn(node);
    }

    public void outADiferentePExpLogica(ADiferentePExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiferentePExpLogica(ADiferentePExpLogica node)
    {
        inADiferentePExpLogica(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getLogicaIgualdadePart() != null)
        {
            node.getLogicaIgualdadePart().apply(this);
        }
        outADiferentePExpLogica(node);
    }

    public void inAParenteseExpLogica(AParenteseExpLogica node)
    {
        defaultIn(node);
    }

    public void outAParenteseExpLogica(AParenteseExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenteseExpLogica(AParenteseExpLogica node)
    {
        inAParenteseExpLogica(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outAParenteseExpLogica(node);
    }

    public void inAMenorExpLogica(AMenorExpLogica node)
    {
        defaultIn(node);
    }

    public void outAMenorExpLogica(AMenorExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorExpLogica(AMenorExpLogica node)
    {
        inAMenorExpLogica(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAMenorExpLogica(node);
    }

    public void inAMenorigualExpLogica(AMenorigualExpLogica node)
    {
        defaultIn(node);
    }

    public void outAMenorigualExpLogica(AMenorigualExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorigualExpLogica(AMenorigualExpLogica node)
    {
        inAMenorigualExpLogica(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAMenorigualExpLogica(node);
    }

    public void inAMaiorigualExpLogica(AMaiorigualExpLogica node)
    {
        defaultIn(node);
    }

    public void outAMaiorigualExpLogica(AMaiorigualExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorigualExpLogica(AMaiorigualExpLogica node)
    {
        inAMaiorigualExpLogica(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAMaiorigualExpLogica(node);
    }

    public void inAMaiorExpLogica(AMaiorExpLogica node)
    {
        defaultIn(node);
    }

    public void outAMaiorExpLogica(AMaiorExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorExpLogica(AMaiorExpLogica node)
    {
        inAMaiorExpLogica(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAMaiorExpLogica(node);
    }

    public void inAUmMenorExpLogica(AUmMenorExpLogica node)
    {
        defaultIn(node);
    }

    public void outAUmMenorExpLogica(AUmMenorExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUmMenorExpLogica(AUmMenorExpLogica node)
    {
        inAUmMenorExpLogica(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outAUmMenorExpLogica(node);
    }

    public void inAUmMenorigExpLogica(AUmMenorigExpLogica node)
    {
        defaultIn(node);
    }

    public void outAUmMenorigExpLogica(AUmMenorigExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUmMenorigExpLogica(AUmMenorigExpLogica node)
    {
        inAUmMenorigExpLogica(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outAUmMenorigExpLogica(node);
    }

    public void inAUmMaiorigExpLogica(AUmMaiorigExpLogica node)
    {
        defaultIn(node);
    }

    public void outAUmMaiorigExpLogica(AUmMaiorigExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUmMaiorigExpLogica(AUmMaiorigExpLogica node)
    {
        inAUmMaiorigExpLogica(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outAUmMaiorigExpLogica(node);
    }

    public void inAUmMaiorExpLogica(AUmMaiorExpLogica node)
    {
        defaultIn(node);
    }

    public void outAUmMaiorExpLogica(AUmMaiorExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUmMaiorExpLogica(AUmMaiorExpLogica node)
    {
        inAUmMaiorExpLogica(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outAUmMaiorExpLogica(node);
    }

    public void inAIgualLogicaIgualdadePart(AIgualLogicaIgualdadePart node)
    {
        defaultIn(node);
    }

    public void outAIgualLogicaIgualdadePart(AIgualLogicaIgualdadePart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualLogicaIgualdadePart(AIgualLogicaIgualdadePart node)
    {
        inAIgualLogicaIgualdadePart(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outAIgualLogicaIgualdadePart(node);
    }

    public void inADifLogicaIgualdadePart(ADifLogicaIgualdadePart node)
    {
        defaultIn(node);
    }

    public void outADifLogicaIgualdadePart(ADifLogicaIgualdadePart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADifLogicaIgualdadePart(ADifLogicaIgualdadePart node)
    {
        inADifLogicaIgualdadePart(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outADifLogicaIgualdadePart(node);
    }

    public void inAAddExp(AAddExp node)
    {
        defaultIn(node);
    }

    public void outAAddExp(AAddExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExp(AAddExp node)
    {
        inAAddExp(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outAAddExp(node);
    }

    public void inASubExp(ASubExp node)
    {
        defaultIn(node);
    }

    public void outASubExp(ASubExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubExp(ASubExp node)
    {
        inASubExp(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outASubExp(node);
    }

    public void inAMultExp(AMultExp node)
    {
        defaultIn(node);
    }

    public void outAMultExp(AMultExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExp(AMultExp node)
    {
        inAMultExp(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outAMultExp(node);
    }

    public void inADivExp(ADivExp node)
    {
        defaultIn(node);
    }

    public void outADivExp(ADivExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExp(ADivExp node)
    {
        inADivExp(node);
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        outADivExp(node);
    }

    public void inAValorExp(AValorExp node)
    {
        defaultIn(node);
    }

    public void outAValorExp(AValorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorExp(AValorExp node)
    {
        inAValorExp(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorExp(node);
    }

    public void inAVarExp(AVarExp node)
    {
        defaultIn(node);
    }

    public void outAVarExp(AVarExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarExp(AVarExp node)
    {
        inAVarExp(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarExp(node);
    }

    public void inAExp(AExp node)
    {
        defaultIn(node);
    }

    public void outAExp(AExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp(AExp node)
    {
        inAExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExp(node);
    }

    public void inAIdUnicaVar(AIdUnicaVar node)
    {
        defaultIn(node);
    }

    public void outAIdUnicaVar(AIdUnicaVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdUnicaVar(AIdUnicaVar node)
    {
        inAIdUnicaVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdUnicaVar(node);
    }

    public void inAVetorVar(AVetorVar node)
    {
        defaultIn(node);
    }

    public void outAVetorVar(AVetorVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorVar(AVetorVar node)
    {
        inAVetorVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAVetorVar(node);
    }

    public void inARealPalavraTipo(ARealPalavraTipo node)
    {
        defaultIn(node);
    }

    public void outARealPalavraTipo(ARealPalavraTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealPalavraTipo(ARealPalavraTipo node)
    {
        inARealPalavraTipo(node);
        outARealPalavraTipo(node);
    }

    public void inAInteiroPalavraTipo(AInteiroPalavraTipo node)
    {
        defaultIn(node);
    }

    public void outAInteiroPalavraTipo(AInteiroPalavraTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroPalavraTipo(AInteiroPalavraTipo node)
    {
        inAInteiroPalavraTipo(node);
        outAInteiroPalavraTipo(node);
    }

    public void inACaracterPalavraTipo(ACaracterPalavraTipo node)
    {
        defaultIn(node);
    }

    public void outACaracterPalavraTipo(ACaracterPalavraTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaracterPalavraTipo(ACaracterPalavraTipo node)
    {
        inACaracterPalavraTipo(node);
        outACaracterPalavraTipo(node);
    }

    public void inABooleanoPalavraTipo(ABooleanoPalavraTipo node)
    {
        defaultIn(node);
    }

    public void outABooleanoPalavraTipo(ABooleanoPalavraTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanoPalavraTipo(ABooleanoPalavraTipo node)
    {
        inABooleanoPalavraTipo(node);
        outABooleanoPalavraTipo(node);
    }

    public void inACharValor(ACharValor node)
    {
        defaultIn(node);
    }

    public void outACharValor(ACharValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharValor(ACharValor node)
    {
        inACharValor(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outACharValor(node);
    }

    public void inAIntValor(AIntValor node)
    {
        defaultIn(node);
    }

    public void outAIntValor(AIntValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntValor(AIntValor node)
    {
        inAIntValor(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAIntValor(node);
    }

    public void inAFloatValor(AFloatValor node)
    {
        defaultIn(node);
    }

    public void outAFloatValor(AFloatValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatValor(AFloatValor node)
    {
        inAFloatValor(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outAFloatValor(node);
    }

    public void inABooleanoValor(ABooleanoValor node)
    {
        defaultIn(node);
    }

    public void outABooleanoValor(ABooleanoValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanoValor(ABooleanoValor node)
    {
        inABooleanoValor(node);
        if(node.getBooleano() != null)
        {
            node.getBooleano().apply(this);
        }
        outABooleanoValor(node);
    }
}
