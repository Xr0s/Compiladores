/* This file was generated by SableCC (http://www.sablecc.org/). */

package simpleAdder.node;

import simpleAdder.analysis.*;

@SuppressWarnings("nls")
public final class AELogicaAnd extends PLogicaAnd
{
    private PLogicaAnd _logicaAnd_;
    private TE _e_;
    private PLogicaXor _logicaXor_;

    public AELogicaAnd()
    {
        // Constructor
    }

    public AELogicaAnd(
        @SuppressWarnings("hiding") PLogicaAnd _logicaAnd_,
        @SuppressWarnings("hiding") TE _e_,
        @SuppressWarnings("hiding") PLogicaXor _logicaXor_)
    {
        // Constructor
        setLogicaAnd(_logicaAnd_);

        setE(_e_);

        setLogicaXor(_logicaXor_);

    }

    @Override
    public Object clone()
    {
        return new AELogicaAnd(
            cloneNode(this._logicaAnd_),
            cloneNode(this._e_),
            cloneNode(this._logicaXor_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAELogicaAnd(this);
    }

    public PLogicaAnd getLogicaAnd()
    {
        return this._logicaAnd_;
    }

    public void setLogicaAnd(PLogicaAnd node)
    {
        if(this._logicaAnd_ != null)
        {
            this._logicaAnd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._logicaAnd_ = node;
    }

    public TE getE()
    {
        return this._e_;
    }

    public void setE(TE node)
    {
        if(this._e_ != null)
        {
            this._e_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._e_ = node;
    }

    public PLogicaXor getLogicaXor()
    {
        return this._logicaXor_;
    }

    public void setLogicaXor(PLogicaXor node)
    {
        if(this._logicaXor_ != null)
        {
            this._logicaXor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._logicaXor_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._logicaAnd_)
            + toString(this._e_)
            + toString(this._logicaXor_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._logicaAnd_ == child)
        {
            this._logicaAnd_ = null;
            return;
        }

        if(this._e_ == child)
        {
            this._e_ = null;
            return;
        }

        if(this._logicaXor_ == child)
        {
            this._logicaXor_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._logicaAnd_ == oldChild)
        {
            setLogicaAnd((PLogicaAnd) newChild);
            return;
        }

        if(this._e_ == oldChild)
        {
            setE((TE) newChild);
            return;
        }

        if(this._logicaXor_ == oldChild)
        {
            setLogicaXor((PLogicaXor) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
