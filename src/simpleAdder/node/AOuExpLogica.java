/* This file was generated by SableCC (http://www.sablecc.org/). */

package simpleAdder.node;

import simpleAdder.analysis.*;

@SuppressWarnings("nls")
public final class AOuExpLogica extends PExpLogica
{
    private PExpLogica _expLogica_;
    private TOu _ou_;
    private PLogicaAnd _logicaAnd_;

    public AOuExpLogica()
    {
        // Constructor
    }

    public AOuExpLogica(
        @SuppressWarnings("hiding") PExpLogica _expLogica_,
        @SuppressWarnings("hiding") TOu _ou_,
        @SuppressWarnings("hiding") PLogicaAnd _logicaAnd_)
    {
        // Constructor
        setExpLogica(_expLogica_);

        setOu(_ou_);

        setLogicaAnd(_logicaAnd_);

    }

    @Override
    public Object clone()
    {
        return new AOuExpLogica(
            cloneNode(this._expLogica_),
            cloneNode(this._ou_),
            cloneNode(this._logicaAnd_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOuExpLogica(this);
    }

    public PExpLogica getExpLogica()
    {
        return this._expLogica_;
    }

    public void setExpLogica(PExpLogica node)
    {
        if(this._expLogica_ != null)
        {
            this._expLogica_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expLogica_ = node;
    }

    public TOu getOu()
    {
        return this._ou_;
    }

    public void setOu(TOu node)
    {
        if(this._ou_ != null)
        {
            this._ou_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ou_ = node;
    }

    public PLogicaAnd getLogicaAnd()
    {
        return this._logicaAnd_;
    }

    public void setLogicaAnd(PLogicaAnd node)
    {
        if(this._logicaAnd_ != null)
        {
            this._logicaAnd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._logicaAnd_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expLogica_)
            + toString(this._ou_)
            + toString(this._logicaAnd_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expLogica_ == child)
        {
            this._expLogica_ = null;
            return;
        }

        if(this._ou_ == child)
        {
            this._ou_ = null;
            return;
        }

        if(this._logicaAnd_ == child)
        {
            this._logicaAnd_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expLogica_ == oldChild)
        {
            setExpLogica((PExpLogica) newChild);
            return;
        }

        if(this._ou_ == oldChild)
        {
            setOu((TOu) newChild);
            return;
        }

        if(this._logicaAnd_ == oldChild)
        {
            setLogicaAnd((PLogicaAnd) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
