Package vaiCompiler;

Helpers

	letra = ['a' .. 'z'] | ['A' .. 'Z'] | '_';
	digito = ['0' .. '9'];
	octal_digito = ['0' .. '7'];
	hex_digito = ['0' .. '9'] | ['A' .. 'F'] | ['a' .. 'f'];
	dec_literal = digito+;
	oct_literal = '0'(octal_digito)+;
	hex_literal = '0'('x' | 'X')(hex_digito)+;
	
	sp = ' ';
	ht  = 0x0009;
	lf  = 0x000a;
	ff  = 0x000c;
	cr  = 0x000d;
	eol = cr | lf | cr lf;
	
Tokens

    white_space = (sp | ht | ff | eol | 0x04)*;
	default = 'default';
	func = 'func';
	return = 'return';
	var = 'var';
	boolean = 'bool';
	int = 'int';
	coment_linha = '//'[32 .. 255]*;
	coment_bloco = '/*'[32 .. 255]*'*/';
	int_literal = dec_literal | oct_literal | hex_literal;
	bool_literal = 'true' | 'false';
	identifier = letra(letra | digito)*;
	soma = '+';
	menos = '-';
	vezes = '*';
	divisao = '/';
	par_esq = '(';
	par_dir = ')';
	chave_esq = '{';
	chave_dir = '}';
	atribuicao = '=';
	igual = '==';
	menor_q = '<';
	maior_q = '>';
	and = '&&';
	or = '||';
	virgula = ',';
	ponto_virgula = ';';
	 
Ignored Tokens
coment_linha, coment_bloco, white_space;
	
Productions
		
	program {-> program} = {functions_decl} function_decl* {-> New program.functions([function_decl]) };
			 
	function_decl {-> function_decl} = {function} func [name]:function_name [signature]:signature [body]:function_body 
									   {-> New function_decl.function( name.function_name, signature.signature, body.function_body)};
	
	function_name {-> function_name} = {identifier} identifier {-> New function_name.identifier( identifier )};
	
	function_body {-> function_body} = {block} block {-> block.function_body};
	
	block {-> function_body} = chave_esq [statements]:statement_list chave_dir {-> New function_body.comandos([statements.statement])};
	
	statement_list {-> statement*}= {single} [comando]:statement {-> [comando.statement]} 
									| {multi} [head]:statement [rest]:statement_list {-> [head.statement,rest.statement] };		
			
	statement {-> statement} = 	{declaration} declaration   {-> declaration.statement}
								| {return} return_stmt 		{-> return_stmt.statement}
								| {simple_stmt} simple_stmt {-> simple_stmt.statement}; 
	
	declaration {-> statement} = {var} var_decl ponto_virgula {-> var_decl.statement};
		
	return_stmt {-> statement} = return [retorno]:expression_list? ponto_virgula {-> New statement.return([retorno.expression])};
	 
	simple_stmt {-> statement} = {assignment} assignment ponto_virgula {-> assignment.statement};		
		
	assignment {-> statement} = [variaveis]:identifier_list atribuicao [valores]:expression_list
								{-> New statement.assignment( [variaveis.identifier],[valores.expression] )};
				   
	var_decl {-> statement} = var var_spec {-> var_spec.statement};
	
	var_spec {-> statement} =   {var_without_attr} [variaveis]:identifier_list [tipo]:type {-> New statement.decl_var( [variaveis.identifier], tipo.type )}
			  				|   {var_attr} [variaveis]:identifier_list [tipo]:type atribuicao [valores]:expression_list 
			   	 				{-> New statement.decl_var_attr( [variaveis.identifier], tipo.type, [valores.expression] )};
	
	identifier_list {->identifier*} =  {single} identifier  {-> [identifier] }
									 | {multi} [rest_name]:identifier_list virgula identifier {-> [identifier, rest_name.identifier] };
		
	expression_list {-> expression*} = {expr} [expr]:expression 	{-> [expr.expression] }
									 | {expr_multi} [expr_rest]:expression_list virgula [expr]:expression	
									 			    {-> [expr.expression, expr_rest.expression] };
 
	expression {-> expression} =  {or} [left]:expression or [right]:expression_a 	{-> New expression.or( left.expression, right.expression )}
								| {and} expression_a {-> expression_a.expression};
								
	expression_a {-> expression} = {and} [left]:expression_a and [right]:expression_b 	{-> New expression.and( left.expression, right.expression )}
								 | {rel} expression_b {-> expression_b.expression};
	
	expression_b {-> expression} = {igual} [left]:expression_b igual [right]:expression_c	  {-> New expression.igual( left.expression, right.expression )}
				 				 | {menor_q} [left]:expression_b menor_q [right]:expression_c {-> New expression.menor_q( left.expression, right.expression )}
				 				 | {maior_q} [left]:expression_b maior_q [right]:expression_c {-> New expression.maior_q( left.expression, right.expression )}
								 | {soma_sub} expression_c {-> expression_c.expression};
	
	expression_c {-> expression} = {soma} [left]:expression_c soma [right]:expression_d 	{-> New expression.soma( left.expression, right.expression )}
				 				 | {sub}  [left]:expression_c menos [right]:expression_d 					{-> New expression.sub( left.expression, right.expression )}
								 | {mul_div} expression_d {-> expression_d.expression};
				 
	expression_d {-> expression} = {mul} [left]:expression_d vezes [right]:expression_e		{-> New expression.mul( left.expression, right.expression )}
								 | {div} [left]:expression_d divisao [right]:expression_e	{-> New expression.div( left.expression, right.expression )}
								 | {primary} expression_e {-> expression_e.expression};
								 
	expression_e {-> expression} = {primary} primary_expr {-> primary_expr.expression};
		
	primary_expr {-> expression} = {operando} operand {-> operand.expression}
				  				 | {pri_args} [left]:primary_expr [right]:arguments {-> New expression.call_func( left.expression, right.arguments)};
	
	arguments {-> arguments} = {arg_without_param} par_esq par_dir								{-> New arguments.arg_without_param()}
							 | {param}par_esq [param]:expression_list par_dir					{-> New arguments.param( [param.expression] )}
							 | {arg_type_arg} par_esq [tipo]:type [arg]:arguments_a par_dir		{-> New arguments.arg_type_arg( tipo.type, arg.arguments_a)}
							 | {arg_type} par_esq [tipo]:type par_dir							{-> New arguments.arg_type( tipo.type)};
	arguments_a {-> arguments_a}  = virgula [arg]:expression_list {-> New arguments_a.arg( [arg.expression] )};				
	
	operand {-> expression} = {var} identifier 		{-> New expression.id(identifier) }
							| {lit} literal			{-> literal.expression}
							| {par_expr} par_expr 	{-> par_expr.expression}; 
							
	par_expr {-> expression} = par_esq [expr]:expression par_dir {-> expr.expression};
	
	literal {-> expression} = {literal} basic_literal 		{-> basic_literal.expression}	
							| {func_lit} function_lit 		{-> function_lit.expression};
							
	basic_literal {-> expression} = {inteiro} int_literal  		{-> New expression.int( int_literal )}
								  | {booleano} bool_literal	  	{-> New expression.bool( bool_literal )};
									 
	function_lit {-> expression} = {lit_func} func [signature]:signature [comandos]:block
									 {-> New expression.func_lit( signature.signature, comandos.function_body)};
		 																	
	type {-> type} = {type_name} type_name {-> type_name.type}
		 | {par_type} par_type	{-> par_type.type}
		 | {type_lit} type_lit	{-> type_lit.type};
		 
	type_name {-> type} = {boolean} boolean {-> New type.boolean( boolean )}
					    | {int} int 		{-> New type.inteiro( int )};
					    
	type_lit {-> type} = function_type {-> function_type.type};
	
	par_type {-> type} = par_esq type par_dir {-> type.type};

	function_type {-> type} = func [signature]:signature {-> New type.func( signature.signature )};
	
	signature {-> signature} = {sig_result} [param]:parameters [retorno]:result	{-> New signature.sig_result( param.parameters, retorno.result )}
							 | {sig} [param]:parameters 	{-> New signature.sig( param.parameters )};
	
	parameters {->parameters} = {param_empty} par_esq par_dir 							{-> New parameters.empty()} 
							  | {par_param} par_esq [lista]:parameter_list par_dir		{-> New parameters.param_list( [lista.parameter_decl] )};
	
	parameter_list {-> parameter_decl*} = {multi} [rest]:parameter_list virgula [head]:parameter_decl	{-> [head.parameter_decl, rest.parameter_decl] }
					 					 | {single} [param]:parameter_decl	{-> [param.parameter_decl]};
	
	parameter_decl {-> parameter_decl} = {param} [var]:identifier_list [tipo]:type 	{-> New parameter_decl.param( [var.identifier], tipo.type)};						
	
	result {-> result} = {param} [param]:parameters		{-> New result.param( param.parameters)}
					   | {r_type} [tipo]:type			{-> New result.r_type(tipo.type)};
	
Abstract Syntax Tree

	program = {functions} function_decl*;
	
	function_decl = {function} [name]:function_name [signature]:signature [body]:function_body;
	function_name = {identifier} identifier;
	function_body = {comandos} statement*;
	
	statement = {decl_var} [variaveis]:identifier* [tipo]:type 
				| {decl_var_attr} [variaveis]:identifier* [tipo]:type [valores]:expression*
				| {assignment} [variaveis]:identifier* [valores]:expression* 
				| {return} [retorno]:expression*;
	
	expression =  {and} 	[left]:expression [right]:expression
				| {or}		[left]:expression [right]:expression
				| {igual}	[left]:expression [right]:expression
				| {menor_q}	[left]:expression [right]:expression
				| {maior_q}	[left]:expression [right]:expression
				| {soma}	[left]:expression [right]:expression
				| {sub}		[left]:expression [right]:expression
				| {mul}		[left]:expression [right]:expression
				| {div}		[left]:expression [right]:expression
				| {call_func} [left]:expression [right]:arguments
				| {id} identifier
				| {int} int_literal
				| {bool} bool_literal
				| {func_lit} [signature]:signature [comandos]:function_body;	
	
	arguments = {arg_without_param}	
			  | {param} [param]:expression*
			  | {arg_type_arg} [tipo]:type [arg]:arguments_a
			  | {arg_type} [tipo]:type;
	arguments_a = {arg} [arg]:expression*;		 
	
	type = {boolean} boolean
		 | {inteiro} int
		 | {func} [signature]:signature;
		 
	signature = {sig_result} [param]:parameters [retorno]:result
			  | {sig} [param]:parameters;
	
	parameters = {empty}
			   | {param_list} [lista]:parameter_decl*;
			   
	parameter_decl = {param} [var]:identifier* [tipo]:type;
	
	result = {param} [param]:parameters
		   | {r_type} [tipo]:type;
	
	